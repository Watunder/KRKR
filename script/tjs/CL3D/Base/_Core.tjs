CL3D.PI = 3.14159265359;
CL3D.RECIPROCAL_PI = 1 / 3.14159265359;
CL3D.HALF_PI = 3.14159265359 / 2;
CL3D.PI64 = 3.141592653589793;
CL3D.DEGTORAD = 3.14159265359 / 180;
CL3D.RADTODEG = 180 / 3.14159265359;
CL3D.TOLERANCE = 1e-8;

CL3D.radToDeg = function(a)
{
    return a * CL3D.RADTODEG;
};

CL3D.degToRad = function(a)
{
    return a * CL3D.DEGTORAD;
};

CL3D.iszero = function(b)
{
    return (b < 1e-8) && (b > -1e-8);
};

CL3D.isone = function(b)
{
    return (b + 1e-8 >= 1) && (b - 1e-8 <= 1);
};

CL3D.equals = function(d, c)
{
    return (d + 1e-8 >= c) && (d - 1e-8 <= c);
};

CL3D.clamp = function(c, a, b)
{
    if (c < a) return a;
    if (c > b) return b;
    return c;
};

CL3D.fract = function(a)
{
    return a - Math.floor(a);
};

CL3D.max3 = function(e, d, f)
{
    if (e > d)
    {
        if (e > f) return e;
        return f;
    }
    if (d > f) return d;
    return f;
};

CL3D.min3 = function(e, d, f)
{
    if (e < d)
    {
        if (e < f) return e;
        return f;
    }
    if (d < f) return d;
    return f;
};

CL3D.getAlpha = function(a)
{
    return ((a & 4278190080) >>> 24);
};

CL3D.getRed = function(a)
{
    return ((a & 16711680) >> 16);
};

CL3D.getGreen = function(a)
{
    return ((a & 65280) >> 8);
};

CL3D.getBlue = function(a)
{
    return ((a & 255));
};

CL3D.createColor = function(d, f, e, c)
{
    d = d & 255;
    f = f & 255;
    e = e & 255;
    c = c & 255;
    return (d << 24) | (f << 16) | (e << 8) | c;
};

CL3D.createColorF = function(b)
{
    var a = new CL3D.ColorF();
    a.A = CL3D.getAlpha(b) / 255;
    a.R = CL3D.getRed(b) / 255;
    a.G = CL3D.getGreen(b) / 255;
    a.B = CL3D.getBlue(b) / 255;
    return a;
};

CL3D.getInterpolatedColor = function(d, c, b)
{
    var a = 1 - b;
    return CL3D.createColor(CL3D.getAlpha(d) * b + CL3D.getAlpha(c) * a, CL3D.getRed(d) * b + CL3D.getRed(c) * a, CL3D.getGreen(d) * b + CL3D.getGreen(c) * a, CL3D.getBlue(d) * b + CL3D.getBlue(c) * a);
};

CL3D.sgn = function(b)
{
    if (b > 0) return 1;
    if (b < 0) return -1;
    return 0;
};

CL3D.ColorF = _ColorF;

class _ColorF
{
    var A = 1;
    var R = 1;
    var G = 1;
    var B = 1;

	function clone()
	{
		var inst = new CL3D.ColorF();
        
		inst.A = this.A;
		inst.R = this.R;
		inst.G = this.G;
		inst.B = this.B;

		return inst;
	}
};

CL3D.UseShadowCascade = true;
CL3D.Global_PostEffectsDisabled = false;
